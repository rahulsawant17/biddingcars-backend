!function(e,t){for(var r in t)e[r]=t[r]}(exports,function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(n,s,function(t){return e[t]}.bind(null,s));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=11)}([function(e,t){e.exports=require("mongoose")},function(e,t){e.exports=require("express")},function(e,t,r){const n=r(0);r(3).config();const s=process.env.ATLAS_URI;console.log("uri",s),n.connect(s,{useNewUrlParser:!0}),t.connection=n.connection},function(e,t){e.exports=require("dotenv")},function(e,t){e.exports=require("cors")},function(e,t,r){const n=r(1),s=r(4),i=n(),o=r(7).createServer(i),{Server:a}=r(8),d=new a(o,{cors:{origin:"http://localhost:3000",methods:["GET","POST"]}});i.use(s()),o.listen(4e3,()=>{console.log("Server is running on socket: 4000")}),e.exports={io:d}},function(e,t,r){const n=r(0),s=new(0,n.Schema)({firstname:{type:String,required:!0},lastname:{type:String,required:!0},email:{type:String,required:!0,unique:!0,trim:!0,minlength:3},paymentDetails:{type:String},role:{type:String,enum:["user","admin"],required:!0},address:{type:String},city:{type:String},state:{type:String},zipCode:{type:Number},country:{type:String},mobileNumber:{type:Number},isVerified:{type:Boolean,required:!0}},{timestamps:!0}),i=n.models.User||n.model("User",s);e.exports=i},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("socket.io")},function(e,t,r){const n=r(18),s=r(6);e.exports=async(e,t,r)=>{if(!e.headers.authorization)return t.status(401).json({message:"Unauthorized Access"});{const i=e.headers.authorization.split(" ")[1];try{const o=await n.auth().verifyIdToken(i);if(o){const t=await s.find({email:o.email});return e.user=t[0],r()}return t.status(401).json({message:"Authorization required"})}catch(e){t.status(400).json(e)}}}},function(e,t,r){const n=r(0),s=new(0,n.Schema)({carCompany:{type:String},photos:{type:Array,required:!0},modelName:{type:String},modelYear:{type:String},description:{type:String},color:{type:String},kilometersDriven:{type:Number},condition:{type:String},basePrice:{type:Number},fullPrice:{type:Number},ownerId:{type:n.Schema.Types.ObjectId,refPath:"User",required:!0},currentBid:{type:Number,default:0},numberOfBids:{type:Number,default:0},endTime:{type:Date},bidTimelineId:{type:Number},ownerId:{type:n.Schema.Types.ObjectId,refPath:"User"},status:{type:String,enum:["pending","approved","rejected","sold"],required:!0},lock:{type:Boolean,default:!1}},{timestamps:!0}),i=n.models.Car||n.model("Car",s);e.exports=i},function(e,t,r){const n=r(1),s=r(4),{connection:i}=(r(0),r(2)),{io:o}=r(5),a=r(12);r(3).config();const d=n();process.env.PORT;d.use(s()),d.use(n.json()),i.once("open",()=>{console.log("MongoDB database connection established successfully")}),o.on("connection",e=>{console.log("a user connected")});const c=r(13),u=r(24),l=r(26);d.use("/.netlify/functions/server/cars",c),d.use("/.netlify/functions/server/users",u),d.use("/.netlify/functions/server/cards",l),e.exports=d,e.exports.handler=a(d)},function(e,t){e.exports=require("serverless-http")},function(e,t,r){const n=r(1).Router(),{listCar:s,updateCar:i,deleteCar:o,getById:a,getAllListings:d,verifyCar:c,rejectCar:u,placeBid:l,placeBidCheck:m,getHistory:p,getMyListings:y,getMyBids:f}=r(14);r(10);const b=r(9),g=r(21);n.get("/",d),n.post("/add",b,g.array("image"),s),n.get("/:id",a),n.get("/mylistings/:email",b,y),n.get("/mybids/:email",b,f),n.get("/:id/history",p),n.delete("/:id",o),n.post("/update/:id",b,i),n.post("/verify/:id",b,c),n.post("/reject/:id",b,u),n.post("/placebid",b,l),n.post("/placebidcheck",b,m),e.exports=n},function(e,t,r){const n=r(10),s=r(15),i=r(6),o=r(16),{connection:a}=r(2),{io:d}=r(5);t.listCar=async(e,t)=>{try{const r=e.files;result=[],r.forEach(async e=>{let t=o.uploader.upload(e.path);result.push(t)}),Promise.all(result).then(r=>{resultantUrls=[],r.forEach(e=>{resultantUrls.push(e.url)});new n({carCompany:e.body.carCompany,photos:resultantUrls,modelName:e.body.modelName,modelYear:Number(e.body.modelYear),color:e.body.color,kilometersDriven:Number(e.body.kilometersDriven),condition:e.body.condition,description:e.body.description,basePrice:Number(e.body.basePrice),fullPrice:Number(e.body.fullPrice),ownerId:e.user._id,currentBid:e.body.currentBid,bidTimelineId:e.body.bidTimelineId,currentBidUserId:e.body.currentBidUserId,status:"pending",endTime:e.body.endTime}).save().then(e=>t.status(200).json({message:"Listing added successfully!!",carDetails:e})).catch(e=>t.status(400).json("Error: "+e))})}catch(e){t.status(400).json("Error: "+e)}},t.updateCar=async(e,t)=>{n.findById(e.params.id).then(r=>{r.carCompany=e.body.carCompany,r.modelName=e.body.modelName,r.modelYear=Number(e.body.modelYear),r.color=e.body.color,r.kilometersDriven=Number(e.body.kilometersDriven),r.condition=e.body.condition,r.basePrice=Number(e.body.basePrice),r.fullPrice=Number(e.body.fullPrice),r.ownerId=e.body.ownerId,r.currentBid=e.body.currentBid,r.bidTimelineId=e.body.bidTimelineId,r.currentBidUserId=e.body.currentBidUserId,r.status=e.body.status,r.save().then(()=>t.json("Car updated!")).catch(e=>t.status(400).json("Error: "+e))}).catch(e=>t.status(400).json("Error: "+e))},t.verifyCar=async(e,t)=>{n.findById(e.params.id).then(r=>{r.status=e.body.status,r.save().then(()=>t.json("Car Verified!")).catch(e=>t.status(400).json("Error: "+e))}).catch(e=>t.status(400).json("Error: "+e))},t.rejectCar=async(e,t)=>{n.findById(e.params.id).then(r=>{r.status=e.body.status,r.save().then(()=>t.json("Car Rejected!")).catch(e=>t.status(400).json("Error: "+e))}).catch(e=>t.status(400).json("Error: "+e))},t.deleteCar=async(e,t)=>{n.findByIdAndDelete(e.params.id).then(()=>t.json("Car deleted.")).catch(e=>t.status(400).json("Error: "+e))},t.getById=(e,t)=>{n.findById(e.params.id).then(e=>t.json(e)).catch(e=>t.status(400).json("Error: "+e))},t.getMyListings=async(e,t)=>{const r=await i.find({email:e.params.email},{_id:1});n.find({ownerId:r}).then(e=>t.json(e)).catch(e=>t.status(400).json("Error: "+e))},t.getMyBids=async(e,t)=>{let r=await i.find({email:e.params.email},{_id:1});console.log(r),r=r[0]._id;let o=await s.find({timeline:{$elemMatch:{"user._id":r}}},{carId:1,_id:0});if(o){let e=o.map((function(e){return e.carId}));n.find({_id:{$in:e}}).then(e=>{t.json(e)}).catch(e=>t.status(400).json("Error: "+e))}else t.json([])},t.getAllListings=async(e,t)=>{n.find().then(e=>t.json(e)).catch(e=>t.status(400).json("Error: "+e))},t.placeBid=async(e,t)=>{const r=e.body.car;try{const o=await i.findById(e.body.car.ownerId),c=Number(e.body.bid);if(e.user.email===o.email)return t.status(200).json({message:"Owner is trying to bid"});if(c<r.basePrice)return t.status(200).json({message:"Bid has to be greater than the base price"});{const i=await n.findById(r._id);if(i.lock)t.status(200).json({message:"Someone else's bid is being processed. Please wait some time and try again"});else{await n.findOneAndUpdate({_id:r._id},{lock:!0});const u=await a.startSession();await u.withTransaction(async()=>{if(!(c>i.currentBid))throw new Error("Bidding amount should be greater than current bid");{const i={_id:r._id},a={$inc:{numberOfBids:1},$set:{currentBid:c}};await n.findOneAndUpdate(i,a,{session:u});const d={user:e.user,bid:c,time:new Date},l=await s.findOne({carId:r._id});if(l){const e=l.timeline;e.push(d),await s.findOneAndUpdate({carId:r._id},{timeline:e},{session:u}),await u.commitTransaction(),t.status(200).json({message:"Bid added successfully!!"})}else{const e=new s({carId:r._id,ownerId:o._id,timeline:[d]});await e.save({session:u}),await n.findOneAndUpdate({_id:r._id},{lock:!1},{session:u}),await u.commitTransaction(),t.status(200).json({message:"Bid added successfully!!",carDetails:e})}}const a=await n.findOneAndUpdate({_id:r._id},{lock:!1},{session:u});d.emit("bid_update",a),u.endSession()})}}}catch(e){await n.findOneAndUpdate({_id:r._id},{lock:!1}),console.log(e),t.status(500).json({message:e})}},t.placeBidCheck=async(e,t)=>{try{const r=await i.findById(e.body.car.ownerId),n=await i.find({email:e.user.email},{isVerified:1,_id:0});e.user.email===r.email?t.status(200).json({check:!1,message:"Owner cannot bid on his own car"}):"admin"===e.user.role?t.status(200).json({check:!1,message:"Admin cannot bid"}):t.status(200).json({check:!0,isVerified:n[0].isVerified})}catch(e){console.log(e),t.status(500).json({message:e})}},t.getHistory=async(e,t)=>{s.findOne({carId:e.params.id}).then(e=>t.status(200).json({history:e})).catch(e=>t.status(400).json("Error: "+e))}},function(e,t,r){const n=r(0),s=new(0,n.Schema)({carId:{type:n.Schema.Types.ObjectId,refPath:"Car",required:!0},ownerId:{type:n.Schema.Types.ObjectId,refPath:"User",required:!0},timeline:{type:Array}},{timestamps:!0}),i=n.models.Timeline||n.model("Timeline",s);e.exports=i},function(e,t,r){const n=r(17).v2;n.config({cloud_name:"dugpy2nmx",api_key:"292243955187647",api_secret:"vvn3vMsDLIvo6p53MGVrWIXYl1I"}),e.exports=n},function(e,t){e.exports=require("cloudinary")},function(e,t,r){const n=r(19),s=r(20);0===n.apps.length&&n.initializeApp({credential:n.credential.cert(s)}),e.exports=n},function(e,t){e.exports=require("firebase-admin")},function(e){e.exports=JSON.parse('{"type":"service_account","project_id":"biddingcars-363616","private_key_id":"388559846437fed3fd3708a1eecdcecde61ec8aa","private_key":"-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCXhmNAJk+4XNjZ\\nAq1uge8K2FNnk1DRj9M1HDcXRnEEjl/BDRskJchiScH7vVIEgbVHvEeCuPE1SvYp\\n/rcD6SQ/FIrOhUFX9cdhujY40eNKXRg3uD/AYcETC9sDeKbXlfRmHLCXJimYsGqV\\nKq841m7MI3jykpv48AfukXoSwEHPCYDDDPmPdbouiQpaOugsbqb2YSmtQgjXuEP4\\nuGCqqSNnMMwUxmCKML2gs+HiZE2ELw/Pg2TgDeR0ZNCQHfl7cPRBBKkFzi/WpDtH\\ntFb8lEl7TwaYm1o5mbexOSZQUSy2JwSD/S36z0WtPvuMXCEozszxi0x/30o5vrtx\\nF+fzydRDAgMBAAECggEAAwFaLZcKRLypW7XXDRaMUFmVtJEHl33JRsfjpdVdVNBN\\na42gKK7hKGXlxYxDOK3+k54oiES1Gq/9GDx3knRze2wjtqXjnmQptgap9aWKuFpb\\n/8WVP3JmOxj57o8xi/Fq8q2F/nF2KL5IVuNiV00VedIISj4IfumlK/ZRsVaD16CE\\n+Q5pKz9NneDY2TTZPk5LdvmB57zCbBnAz+lXXVPJc4lw7euI5K3LvwKeGpXSd+FM\\nle+Nw+pud5JW1mb+RnsYxoAF2jPeVZmsRN3BwPyQUoN3bKruZhkLcaTVA9PFrlvP\\nfCOP/p4ht6j7F4UEIlbmUr3GZyQ7+4Qprt2fU56fUQKBgQDMRWSbVEB3G17Nifba\\nGol8KMXkI6KjIXqTqsNkcgqyGPlPEcRXEdnzasNsvIiYkMVih1hVdFbVFbinXG5W\\nE1Zvp6hlc7ON0ZkqeoMXcqqdbzl+eNxrnWH34l2zLWGlzB2qyZ92i5Wx05kW3x4y\\nPnD7VTQlthBBLx6AIoMPUj0EEwKBgQC95Ym7KOW4v6IaAkB8qKbQBcZtTkakAggR\\n/cTPUQsi0tElwhZ1OXFC6Z2mtMJB09kwb6D+IM2Z0ukAx6kSOl8BaZMT1P16LTgg\\ne+nMRqh0Q0VvadOqCJ26OTh5/49IhX7+BpNkOJzOauyMT/+aBsDRpgmGhYoDaXXy\\nbjJ3KN0VEQKBgDJ0wZEMko/ZFuW2Ol9NRsCAYcEkfDvHPTvUZkcdVD8BpDM/tDu9\\nkRRrPrJRL3xf5iGcRNl2zyv7HY1Za3efdy5FP3cvyR4ys56mfFMCY9pXauAugmOi\\nkFxmcbaccw49CObyvozNlcBDAAGCQzct7UJnnWXjPsibFvGXlL/oFGI5AoGAa7+M\\ncPf5sOR7VAqnEJSZYjuEpYzepDzK23qEa6XujanVJnmESKt5SqBH5cl21+ceu077\\nqHZwcrGrp9eiZUddlO2UmJIn6WUzDauBs3j8KEvrYBZKFZah+IJzOzX41Qt6TSTq\\nCNnej3k4Ez1pKLpgOhTeHsgy0VDLre09EUPMfiECgYAn9M+bJDtGA3a2XmOqI61f\\ns97C1izhY3Yo5RMe3QmRvV1DsYsaK96gMV7phtm6GzAwv5bt4UzmaTJ/FmtITk0a\\nsrUeYbvlZ5mfyZH5E2CYZIKDj6xIQQEQeu784rXGl8nqbR5qyS8M5jfJIOQTRb5D\\niQ38e8FAwmTRb9ujpXkYzQ==\\n-----END PRIVATE KEY-----\\n","client_email":"firebase-adminsdk-ulaf9@biddingcars-363616.iam.gserviceaccount.com","client_id":"101720513215993324906","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_x509_cert_url":"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-ulaf9%40biddingcars-363616.iam.gserviceaccount.com"}')},function(e,t,r){const n=r(22),s=r(23);e.exports=n({storage:n.diskStorage({}),fileFilter:(e,t,r)=>{let n=s.extname(t.originalname);".jpg"===n||".jpeg"===n||".png"===n?r(null,!0):r(new Error("File type is not supported"),!1)}})},function(e,t){e.exports=require("multer")},function(e,t){e.exports=require("path")},function(e,t,r){const n=r(1).Router(),{getUsers:s,addUser:i,getUserById:o,getUserByEmail:a,updateUserByEmail:d}=r(25);let c=r(9);n.get("/",s),n.get("/:email",c,a),n.get("/:id",c,o),n.post("/add",c,i),n.post("/update",c,d),e.exports=n},function(e,t,r){let n=r(6);t.getUsers=(e,t)=>{n.find().then(e=>t.json(e)).catch(e=>t.status(400).json("Error: "+e))},t.getUserById=(e,t)=>{n.findById(e.params.id).then(e=>t.json(e)).catch(e=>t.status(400).json("Error: "+e))},t.getUserByEmail=(e,t)=>{n.findOne({email:e.params.email}).then(e=>t.json(e)).catch(e=>t.status(400).json("Error: "+e))},t.addUser=async(e,t)=>{console.log("add user function",e.body);if(await n.findOne({email:e.body.email}))t.status(400).json("Error: User already Exists");else{new n({firstname:e.body.firstname,lastname:e.body.lastname,email:e.body.email,role:e.body.role,isVerified:!1}).save().then(()=>t.json("User added!")).catch(e=>t.status(400).json("Error: "+e))}},t.updateUserByEmail=async(e,t)=>{try{try{console.log("updateUserByEmail",e.headers.user)}catch(e){console.log("user object not ")}await n.updateOne({email:e.body.email},{$set:{email:e.body.newemail,firstname:e.body.firstName,lastname:e.body.lastName,address:e.body.address,city:e.body.city,state:e.body.state,zipCode:e.body.zipCode,country:e.body.country,mobileNumber:e.body.mobile}}),t.status(200).json("Message: User Updated")}catch(e){t.status(400).json("Error: "+e)}}},function(e,t,r){const n=r(1).Router(),{getCarddetails:s,addCarddetails:i}=r(27);let o=r(9);n.get("/",s),n.post("/add",o,i),e.exports=n},function(e,t,r){let n=r(28);r(6);t.getCarddetails=(e,t)=>{n.find().then(e=>t.json(e)).catch(e=>t.status(400).json("Error: "+e))},t.addCarddetails=async(e,t)=>{new n({customerId:e.user._id,customerName:e.body.name,cardNumber:Number(e.body.cardnumber),expiryDate:e.body.expiry,cardType:e.body.cardtype,cvv:Number(e.body.cvv)}).save().then(()=>t.json("Card details added!")).catch(e=>t.status(400).json("Error: "+e))}},function(e,t,r){const n=r(0),s=new(0,n.Schema)({customerId:{type:n.Schema.Types.ObjectId,refPath:"User"},customerName:{type:String,required:!0},cardNumber:{type:Number,required:!0},expiryDate:{type:String},cardType:{type:String,enum:["creditCard","debitCard"],required:!0},cvv:{type:Number}},{timestamps:!0}),i=n.models.Carddetails||n.model("Carddetails",s);e.exports=i}]));